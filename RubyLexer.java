// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: ruby.jflex

// package RubyScanner;

// import RubyScanner.Token;
// import RubyScanner.TokenType;


@SuppressWarnings("fallthrough")
class RubyLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ML_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\2\12\1\13\2\14\1\15"+
    "\1\16\1\14\1\16\1\17\1\20\1\21\1\22\6\23"+
    "\2\24\2\14\1\25\1\26\1\27\1\30\1\14\1\31"+
    "\1\32\1\31\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\37\1\42\1\37\1\43\11\37\1\44\2\37"+
    "\1\14\1\45\1\14\1\12\1\46\1\14\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\41"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\37\1\66"+
    "\1\67\1\70\1\71\1\37\1\72\1\73\1\74\1\37"+
    "\1\14\1\75\2\14\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\1\3\1\4\1\5\1\1\4\3"+
    "\2\6\2\3\3\7\1\1\22\7\1\3\1\10\2\11"+
    "\1\12\1\1\2\10\1\1\1\0\2\5\1\7\5\6"+
    "\1\0\2\6\1\0\1\6\3\7\1\0\11\7\1\13"+
    "\22\7\1\0\1\14\1\6\1\0\3\6\1\7\2\0"+
    "\7\7\1\13\20\7\2\6\1\7\2\0\7\7\2\6"+
    "\1\0\1\7\2\6\1\0\2\6\1\0\2\6\1\13"+
    "\5\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\272\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\272\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\272\0\u09ee\0\272\0\u0a2c\0\272"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\272\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\272\0\u0d52\0\u0d90"+
    "\0\272\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u041e\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\272\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\272\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\10\1\11\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\3\21\1\22\1\10\1\23\1\14\1\24"+
    "\1\25\1\24\1\26\10\24\1\4\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\24\1\37\2\24"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\24\1\51\1\52\2\53\1\54\2\53\1\55"+
    "\1\53\1\56\35\53\1\57\32\53\1\60\2\53\1\61"+
    "\1\53\1\62\35\53\1\57\30\53\77\0\1\5\2\0"+
    "\1\5\73\0\1\6\121\0\1\14\56\0\1\63\3\0"+
    "\1\63\62\0\2\12\1\64\2\12\1\65\70\12\31\0"+
    "\14\66\2\0\26\66\16\0\1\10\10\0\1\14\66\0"+
    "\1\14\1\0\4\67\71\0\1\10\5\0\1\14\66\0"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\7\0\1\74"+
    "\1\75\4\0\1\76\1\0\1\77\6\0\1\74\1\75"+
    "\4\0\1\76\11\0\1\77\21\0\1\67\1\0\4\21"+
    "\7\0\1\74\1\75\4\0\1\76\3\0\1\100\4\0"+
    "\1\74\1\75\4\0\1\76\41\0\1\10\2\14\74\0"+
    "\1\14\1\10\54\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\27\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\3\24\1\102\10\24"+
    "\1\0\27\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\12\24\1\103\1\24\1\0\27\24\47\0"+
    "\1\104\35\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\13\24\1\105\1\24\1\106\3\24"+
    "\1\107\5\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\5\24\1\110\12\24\1\111"+
    "\6\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\1\24\1\112\6\24\1\113\2\24"+
    "\1\114\13\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\5\24\1\115\10\24\1\116"+
    "\10\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\13\24\1\117\1\24\1\120\11\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\1\24\1\121\14\24\1\42\10\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\5\24\1\122\21\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\6\24\1\116"+
    "\6\24\1\116\11\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\16\24\1\123\10\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\5\24\1\124\3\24\1\125\4\24\1\126"+
    "\10\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\20\24\1\116\6\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\20\24\1\127\2\24\1\122\3\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\1\24"+
    "\1\130\3\24\1\131\21\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\5\24\1\132"+
    "\15\24\1\133\3\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\10\24\1\134\7\24"+
    "\1\135\6\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\15\24\1\136\11\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\10\24\1\137\16\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\11\24\1\140"+
    "\15\24\27\0\1\14\46\0\1\14\2\53\1\0\2\53"+
    "\1\0\1\53\1\0\35\53\1\0\30\53\2\0\1\54"+
    "\73\0\2\60\4\0\70\60\2\0\1\60\102\0\1\141"+
    "\75\0\1\142\3\0\1\142\64\0\1\64\114\0\4\66"+
    "\4\0\14\66\1\0\27\66\22\0\4\67\7\0\1\74"+
    "\1\75\15\0\1\74\1\75\40\0\1\67\1\0\1\70"+
    "\1\71\1\72\1\73\7\0\1\74\1\75\4\0\1\76"+
    "\10\0\1\74\1\75\4\0\1\76\33\0\1\67\1\0"+
    "\3\72\1\73\7\0\1\74\1\75\4\0\1\76\10\0"+
    "\1\74\1\75\4\0\1\76\33\0\1\67\1\0\3\143"+
    "\1\73\7\0\1\74\1\75\4\0\1\76\10\0\1\74"+
    "\1\75\4\0\1\76\33\0\1\67\1\0\4\73\7\0"+
    "\1\74\1\75\15\0\1\74\1\75\37\0\1\144\2\0"+
    "\4\145\112\0\1\76\55\0\1\146\3\147\4\0\5\147"+
    "\11\0\6\147\42\0\4\100\15\0\1\76\3\0\1\100"+
    "\12\0\1\76\22\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\5\24\1\150\6\24\1\0\27\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\2\24"+
    "\1\116\11\24\1\0\27\24\36\0\1\151\4\0\1\152"+
    "\41\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\11\24\1\153\15\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\4\24"+
    "\1\116\22\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\21\24\1\154\5\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\7\24\1\155\17\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\5\24\1\156"+
    "\21\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\21\24\1\157\5\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\16\24\1\160\10\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\1\24\1\161\25\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\6\24\1\162\20\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\21\24"+
    "\1\163\5\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\4\24\1\116\14\24\1\164"+
    "\5\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\13\24\1\112\13\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\22\24\1\165\4\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\4\24\1\166\22\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\25\24\1\126\1\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\13\24"+
    "\1\116\13\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\22\24\1\116\4\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\11\24\1\167\15\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\15\24\1\106"+
    "\11\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\4\24\1\170\14\24\1\171\1\172"+
    "\4\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\13\24\1\173\13\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\17\24\1\174\7\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\5\24\1\175\21\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\23\24\1\157\3\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\4\24"+
    "\1\176\6\24\1\177\6\24\1\200\4\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\5\24\1\175\3\24\1\201\15\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\5\24"+
    "\1\202\21\24\10\0\1\56\105\0\1\67\1\0\3\203"+
    "\1\73\7\0\1\74\1\75\4\0\1\76\10\0\1\74"+
    "\1\75\4\0\1\76\35\0\4\145\72\0\4\145\10\0"+
    "\1\75\16\0\1\75\42\0\1\146\3\147\4\0\5\147"+
    "\4\0\1\76\4\0\6\147\4\0\1\76\35\0\4\204"+
    "\4\0\5\204\4\0\1\76\4\0\6\204\4\0\1\76"+
    "\22\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\7\24\1\205\4\24\1\0\27\24\41\0\1\206\75\0"+
    "\1\207\43\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\1\24\1\165\25\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\5\24\1\210\21\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\11\24\1\175\15\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\1\24\1\211\25\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\5\24"+
    "\1\116\21\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\14\24\1\212\12\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\21\24\1\165\5\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\11\24\1\213"+
    "\15\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\5\24\1\116\3\24\1\173\15\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\23\24\1\214\3\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\21\24"+
    "\1\116\5\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\23\24\1\201\3\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\15\24\1\126\11\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\16\24\1\116"+
    "\10\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\3\24\1\135\23\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\20\24\1\215\2\24\1\216\3\24\7\0\1\101\12\0"+
    "\4\24\1\0\1\101\1\0\1\101\14\24\1\0\6\24"+
    "\1\116\20\24\7\0\1\101\12\0\4\24\1\0\1\101"+
    "\1\0\1\101\14\24\1\0\5\24\1\42\21\24\7\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\15\24\1\116\11\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\5\24\1\173"+
    "\21\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\5\24\1\161\21\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\11\24\1\125\15\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\13\24\1\157\13\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\13\24\1\106\13\24\20\0\1\67\1\0"+
    "\3\217\1\73\7\0\1\74\1\75\4\0\1\76\10\0"+
    "\1\74\1\75\4\0\1\76\35\0\4\220\4\0\5\220"+
    "\4\0\1\76\4\0\6\220\4\0\1\76\22\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\12\24\1\116"+
    "\1\24\1\0\27\24\43\0\1\221\76\0\1\221\40\0"+
    "\1\101\12\0\4\24\1\0\1\101\1\0\1\101\14\24"+
    "\1\0\20\24\1\126\6\24\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\12\24\1\116"+
    "\14\24\7\0\1\101\12\0\4\24\1\0\1\101\1\0"+
    "\1\101\14\24\1\0\17\24\1\116\7\24\7\0\1\101"+
    "\12\0\4\24\1\0\1\101\1\0\1\101\14\24\1\0"+
    "\15\24\1\222\11\24\7\0\1\101\12\0\4\24\1\0"+
    "\1\101\1\0\1\101\14\24\1\0\20\24\1\157\6\24"+
    "\7\0\1\101\12\0\4\24\1\0\1\101\1\0\1\101"+
    "\14\24\1\0\26\24\1\116\7\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\20\24\1\175"+
    "\6\24\20\0\1\67\1\0\3\223\1\73\7\0\1\74"+
    "\1\75\4\0\1\76\10\0\1\74\1\75\4\0\1\76"+
    "\35\0\4\224\4\0\5\224\4\0\1\76\4\0\6\224"+
    "\4\0\1\76\50\0\1\225\47\0\1\101\12\0\4\24"+
    "\1\0\1\101\1\0\1\101\14\24\1\0\5\24\1\106"+
    "\21\24\20\0\1\67\1\0\3\226\1\73\7\0\1\74"+
    "\1\75\4\0\1\76\10\0\1\74\1\75\4\0\1\76"+
    "\35\0\4\227\4\0\5\227\4\0\1\76\4\0\6\227"+
    "\4\0\1\76\62\0\1\230\46\0\1\67\1\0\3\231"+
    "\1\73\7\0\1\74\1\75\4\0\1\76\10\0\1\74"+
    "\1\75\4\0\1\76\35\0\4\232\4\0\5\232\4\0"+
    "\1\76\4\0\6\232\4\0\1\76\62\0\1\233\46\0"+
    "\1\67\1\0\3\234\1\73\7\0\1\74\1\75\4\0"+
    "\1\76\10\0\1\74\1\75\4\0\1\76\35\0\4\235"+
    "\4\0\5\235\4\0\1\76\4\0\6\235\4\0\1\76"+
    "\33\0\1\67\1\0\3\236\1\73\7\0\1\74\1\75"+
    "\4\0\1\76\10\0\1\74\1\75\4\0\1\76\35\0"+
    "\4\237\4\0\5\237\4\0\1\76\4\0\6\237\4\0"+
    "\1\76\33\0\1\67\1\0\3\240\1\73\7\0\1\74"+
    "\1\75\4\0\1\76\10\0\1\74\1\75\4\0\1\76"+
    "\35\0\4\241\4\0\5\241\4\0\1\76\4\0\6\241"+
    "\4\0\1\76\33\0\1\67\1\0\3\242\1\73\7\0"+
    "\1\74\1\75\4\0\1\76\10\0\1\74\1\75\4\0"+
    "\1\76\35\0\4\243\4\0\5\243\4\0\1\76\4\0"+
    "\6\243\4\0\1\76\33\0\1\67\1\0\3\244\1\73"+
    "\7\0\1\74\1\75\4\0\1\76\10\0\1\74\1\75"+
    "\4\0\1\76\35\0\4\245\4\0\5\245\4\0\1\76"+
    "\4\0\6\245\4\0\1\76\33\0\1\67\1\0\3\246"+
    "\1\73\7\0\1\74\1\75\4\0\1\76\10\0\1\74"+
    "\1\75\4\0\1\76\35\0\4\247\4\0\5\247\4\0"+
    "\1\76\4\0\6\247\4\0\1\76\33\0\1\67\1\0"+
    "\3\250\1\73\7\0\1\74\1\75\4\0\1\76\10\0"+
    "\1\74\1\75\4\0\1\76\35\0\4\251\4\0\5\251"+
    "\4\0\1\76\4\0\6\251\4\0\1\76\33\0\1\67"+
    "\1\0\3\252\1\73\7\0\1\74\1\75\4\0\1\76"+
    "\10\0\1\74\1\75\4\0\1\76\35\0\4\253\4\0"+
    "\5\253\4\0\1\76\4\0\6\253\4\0\1\76\33\0"+
    "\1\67\1\0\3\254\1\73\7\0\1\74\1\75\4\0"+
    "\1\76\10\0\1\74\1\75\4\0\1\76\35\0\4\255"+
    "\4\0\5\255\4\0\1\76\4\0\6\255\4\0\1\76"+
    "\33\0\1\67\1\0\3\256\1\73\7\0\1\74\1\75"+
    "\4\0\1\76\10\0\1\74\1\75\4\0\1\76\35\0"+
    "\4\257\4\0\5\257\4\0\1\76\4\0\6\257\4\0"+
    "\1\76\33\0\1\67\1\0\3\260\1\73\7\0\1\74"+
    "\1\75\4\0\1\76\10\0\1\74\1\75\4\0\1\76"+
    "\56\0\1\76\16\0\1\76\33\0\1\67\1\0\3\261"+
    "\1\73\7\0\1\74\1\75\4\0\1\76\10\0\1\74"+
    "\1\75\4\0\1\76\33\0\1\67\1\0\3\262\1\73"+
    "\7\0\1\74\1\75\4\0\1\76\10\0\1\74\1\75"+
    "\4\0\1\76\33\0\1\67\1\0\3\263\1\73\7\0"+
    "\1\74\1\75\4\0\1\76\10\0\1\74\1\75\4\0"+
    "\1\76\33\0\1\67\1\0\4\73\7\0\1\74\1\75"+
    "\4\0\1\76\10\0\1\74\1\75\4\0\1\76\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10416];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\5\1\1\11\37\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\1\11\7\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\11\2\1\1\0"+
    "\34\1\1\0\1\11\1\1\1\0\4\1\2\0\33\1"+
    "\2\0\11\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\11\5\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private String yyString;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(TokenType.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException(String.format("Input Not Found: %s", yytext()));
            }
          // fall through
          case 13: break;
          case 2:
            { /* ignore whitespace */
            }
          // fall through
          case 14: break;
          case 3:
            { return new Token(TokenType.OPERATOR, yytext());
            }
          // fall through
          case 15: break;
          case 4:
            { yybegin(STRING);
                                        yyString = "";
            }
          // fall through
          case 16: break;
          case 5:
            { /* ignore comment */
            }
          // fall through
          case 17: break;
          case 6:
            { return new Token(TokenType.NUMBER, yytext());
            }
          // fall through
          case 18: break;
          case 7:
            { return new Token(TokenType.ID, yytext());
            }
          // fall through
          case 19: break;
          case 8:
            { yyString += yytext();
            }
          // fall through
          case 20: break;
          case 9:
            { throw new RuntimeException(String.format("Unterminated String: %s at line %d col %d", yytext(), yyline, yycolumn));
            }
          // fall through
          case 21: break;
          case 10:
            { yybegin(YYINITIAL);
                                        // length also includes the trailing quote
                                        return new Token(TokenType.LITERAL, yyString);
            }
          // fall through
          case 22: break;
          case 11:
            { return new Token(TokenType.KEYWORD, yytext());
            }
          // fall through
          case 23: break;
          case 12:
            { yybegin(ML_STRING);
                                        yyString = "";
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
